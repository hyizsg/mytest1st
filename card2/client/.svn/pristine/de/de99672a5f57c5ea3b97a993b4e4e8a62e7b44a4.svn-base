//
//  HGameManager.cpp
//  card2
//
//  Created by zhou gang on 14-2-10.
//
//

#include "HGameManager.h"
#include "HLoginMainWindow.h"
#include "HMainCityWindow.h"

HGameManager* g_Game = NULL;
HSourceCache* g_SourceCache = NULL;
HSINGLETON_OBJECT_IMP(HGameManager);

void afterCreateWindow()
{
//    CrossDelegate::SNSHasLogin();
}

int requestScreenOrientation()
{
    return HORIENTATION_LANDSCAPE;
}

HGameDelegate *requestGameDelegate()
{
    
    HGameDelegate::ratioOfEquality();
    addSupportedScreenData(480, 320, "iphone", 1);
    
    return (g_Game = HGameManager::getInstance());
}

HGameManager::HGameManager()
{
    setPlatFormAndMarket(CURR_GCTYPE, CURR_PLATFORM);
    setNetParameters(HPASSPORTURL, HLOCALPASSPORTURL, HGAME_ID, HSOCKETIP, HSOCKETPORT, HVISIT_WEBSITE, "1");
    enableSocket(true);
    setProtocolTimeoutInterval(15.0f);
    HNetManager::getInstance()->setMaxConnectTime(30);
}

HGameManager::~HGameManager()
{
    
}

void HGameManager::preloadLoaders()
{
    
}

void HGameManager::initGame()
{
    g_Game = this;
    g_SourceCache = m_pSourceCache;
    
#ifdef ANDROID
    std::string searchPath = CCFileUtils::sharedFileUtils()->getWritablePath() + "resource/";
    CCFileUtils::sharedFileUtils()->addSearchPath(searchPath.c_str());
#else
    CCFileUtils::sharedFileUtils()->addSearchPath("public_res/");
#endif
    
    
    HPlistManager::getInstance()->addPlist("ui/ccbDefaultImages.plist");
    initCCBLoader();
    
    HLoginMainWindow::create()->presentRootLayer(false);
    
}

void HGameManager::enterBackground()
{
    
}

void HGameManager::enterForeground()
{
    
}

void HGameManager::onNeedHeartBeat()
{
    
}

void HGameManager::onNeedUpdateData()
{
    
}

void HGameManager::onNeedReLogin()
{
    
}

void HGameManager::onNetworkFailed()
{
    
}

void HGameManager::onForceCloseByServer()
{
    
}

void HGameManager::onNeedAccount()
{
    
}

void HGameManager::startGame()
{
    HMainCityWindow* city = HMainCityWindow::create();
    HRootScene::current()->pressentGame(city);
    
    city->dismissAllLayers();
}

void HGameManager::initDirector()
{
    CCDirector *pDirector = CCDirector::sharedDirector();
    
    PHSCREENDATA pData = currentScreenData();
    CCSize frameSize = CCEGLView::sharedOpenGLView()->getFrameSize();
    CCSize screenSize = frameSize;
    
    // enable High Resource Mode(2x, such as iphone4) and maintains low resource on other devices.
    // pDirector->enableRetinaDisplay(true);
    bool isRetina = AppDelegate::getInstance()->getRetinaScreen();
    if (!isRetina) {
        if (screenSize.width > pData->width * 1.5f) {
            isRetina = true;
            AppDelegate::getInstance()->setRetinaScreen(isRetina);
        } else {
            HLOGI("Retina Display Not supported");
        }
    }
    
    if (isRetina) {
        pDirector->setContentScaleFactor(2.0f);
        screenSize = CCSizeMake(screenSize.width / 2, screenSize.height / 2);
        HLOGI("Retina Display  supported");
    }
    
    float sx = screenSize.width / pData->width;
    float sy = screenSize.height / pData->height;
    float startx = 0;
    float starty = 0;
    
    if (HRootLayer::m_sbRatioOfEquality) {
        sx = sy = MIN(sx, sy);
        startx = (screenSize.width - pData->width * sx)/(2*sx);
        starty = (screenSize.height - pData->height * sy)/(2*sy);
    }
    
    if (false)// CrossDelegate::isIphone5())
    {
        HRootScene::isAddSlib = true;
    } else {
        if (startx >= 15) {
            HRootScene::isAddSlib = true;
        }
    }
    
    CCSize designSize = HRootScene::isAddSlib ? CCSizeMake(startx*2+480, 320) : CCSizeMake(480, 320);
    CCEGLView::sharedOpenGLView()->setDesignResolutionSize(designSize.width, designSize.height, kResolutionShowAll);
    
    m_szScreen = pDirector->getWinSize();
    
    m_pSourceCache = HSourceCache::getInstance();
    m_pTimerManager = HTimerManager::getInstance();
    
    float retinaFactor = 2;//CrossDelegate::getEGLViewContentScaleFactor();
    float scaleFactor = CCEGLView::sharedOpenGLView()->getScaleX();
    
    if (HRootScene::isAddSlib) {
        pData->startX = startx;
        pData->startY = starty;
    }
    
    pData->osStartX = startx * scaleFactor / retinaFactor;
    pData->osStartY = starty * scaleFactor / retinaFactor;
    pData->gameResourceScale = (screenSize.width > pData->width * 1.5)  ? 2 : 1;
    
//    CCLOG("<screen>");
//    CCLOG("\tos.frame_size: [%.1f, %.1f]", frameSize.width, frameSize.height);
//    CCLOG("\tos.retina: %s", CrossDelegate::getEGLViewContentScaleFactor() == 2.0f ? "true" : "false");
//    CCLOG("\tos.scale_factor: %.1f", CrossDelegate::getEGLViewContentScaleFactor());
//    CCLOG("\tgl.retina: %s", isRetina ? "true" : "false");
//    CCLOG("\tgl.scale_factor: %.1f", pDirector->getContentScaleFactor());
//    CCLOG("\tgl.window_size: [%.1f, %.1f]", m_szScreen.width, m_szScreen.height);
//    CCLOG("\tgl.design_size: [%.1f, %.1f]", designSize.width, designSize.height);
//    CCLOG("\tgl.scaleXY: [%.3f, %.3f]", CCEGLView::sharedOpenGLView()->getScaleX(), CCEGLView::sharedOpenGLView()->getScaleY());
//    CCLOG("\tgl.startXY: [%.1f, %.1f]", pData->startX, pData->startY);
//    CCLOG("\tos.startXY: [%.1f, %.1f]", getOSViewStartPosition().x, getOSViewStartPosition().y);
//    CCLOG("</screen>");

}

void HGameManager::initCCBLoader()
{
    CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary()->unregisterCCNodeLoader("CCLabelTTF");
    CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary()->unregisterCCNodeLoader("HRichLabelTTF");
    CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary()->unregisterCCNodeLoader("CCControlButton");
    CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary()->unregisterCCNodeLoader("CCEditBox");
    CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary()->unregisterCCNodeLoader("CCSprite");
    CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary()->unregisterCCNodeLoader("CCTableView");
    
    REGISTER_CCNODE_LOADER(CCSprite, HRichSpriteLoader::loader());
    REGISTER_CCNODE_LOADER(HGraySprite, HRichSpriteLoader::loader());
    REGISTER_CCNODE_LOADER(HThreadSprite, HRichSpriteLoader::loader());
    REGISTER_CCNODE_LOADER(HRichSprite, HRichSpriteLoader::loader());
    
    REGISTER_CCNODE_LOADER(HTransformNode, HTransformNodeLoader::loader());
    REGISTER_CCNODE_LOADER(CCProgressTimer, CCProgressTimerLoader::loader());
    REGISTER_CCNODE_LOADER(CCLabelTTF, HRichLabelTTF2Loader::loader());
    REGISTER_CCNODE_LOADER(HSharpLabelTTF, HRichLabelTTF2Loader::loader());
    REGISTER_CCNODE_LOADER(HGrayLabelTTF, HRichLabelTTF2Loader::loader());
    REGISTER_CCNODE_LOADER(HRichLabelTTF, HRichLabelTTF2Loader::loader());
    REGISTER_CCNODE_LOADER(HRichLabelTTF2, HRichLabelTTF2Loader::loader());
//    REGISTER_CCNODE_LOADER(HEditField, HEditFieldLoader::loader());
    
    REGISTER_CCNODE_LOADER(CCControlButton, HRichButtonLoader::loader());
    REGISTER_CCNODE_LOADER(HRichButton, HRichButtonLoader::loader());
#ifndef ANDROID
    REGISTER_CCNODE_LOADER(CCEditBox, HCardEditBoxLoader::loader());
#else
    REGISTER_CCNODE_LOADER(CCEditBox, HEditBoxLoader::loader());
#endif
    REGISTER_CCNODE_LOADER(CCTableView, CCTableViewLoader2::loader());
    REGISTER_CCNODE_LOADER(HTableView, HTableViewLoader::loader());
    REGISTER_CCNODE_LOADER(HTableViewCell, HTableViewCellLoader::loader());
    
    REGISTER_CCNODE_LOADER(HNewbieChatDialog, HNewbieChatDialogLoader::loader());
}


void HGameManager::onMessageBox(const char *message, const char *titile)
{
    
}

void HGameManager::receiveDataTimeout(int command)
{
    
}

void HGameManager::preProcessNetResult(int command, CCDictionary *result)
{
    
}

void HGameManager::onUpdateFinished()
{
    
}



